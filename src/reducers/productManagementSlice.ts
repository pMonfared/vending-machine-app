import { createSlice, PayloadAction } from "@reduxjs/toolkit";

// Define a type for your product data
interface Product {
  id: number;
  name: string;
  // ... other fields
}

// Define a type for your product management state
interface ProductManagementState {
  products: Product[];
}

// Create a Redux slice for product management
const productManagementSlice = createSlice({
  name: "productManagement", // Name of the slice
  initialState: {
    products: [], // Initialize products as an empty array
  } as ProductManagementState, // Initialize with the correct type
  reducers: {
    // Define reducer functions for actions
    addProduct: (state, action: PayloadAction<Product>) => {
      // Add a product to the state's products array
      state.products.push(action.payload);
    },
    updateProduct: (state, action: PayloadAction<Product>) => {
      // Find the index of the product to be updated
      const index = state.products.findIndex(
        (product) => product.id === action.payload.id
      );
      if (index !== -1) {
        // Update the product if found
        state.products[index] = action.payload;
      }
    },
    deleteProduct: (state, action: PayloadAction<number>) => {
      // Remove a product from the state's products array by filtering
      state.products = state.products.filter(
        (product) => product.id !== action.payload
      );
    },
  },
});

// Export the actions created by the slice
export const { addProduct, updateProduct, deleteProduct } =
  productManagementSlice.actions;

// Export the reducer function generated by the slice
export default productManagementSlice.reducer;
